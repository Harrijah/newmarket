import React, { useState, useEffect, useRef } from 'react';
import { useSelector, useDispatch } from 'react-redux';

//------------------------------REDUX-------------------------------------------
import { addRayon } from "../action/rayon.action";
import { addCategorie } from "../action/categorie.action";
import { addsouscat } from "../action/souscat.action";
import { addMarque } from "../action/marque.action";
import { addProduct, getProduct, modifyProduct } from "../action/produit.action";


//------------------------------Editor - WYSIWYG-------------------------------------------
import { Editor } from "react-draft-wysiwyg";
import { EditorState, convertFromRaw, convertToRaw } from "draft-js";
import draftToHtml from "draftjs-to-html";
import "react-draft-wysiwyg/dist/react-draft-wysiwyg.css";

//------------------------------ Autres -------------------------------------------
import { isEmpty } from '../Assets/Utils';



const Productformulaire = ({ closeproductmodal, userdata, storedata, productdetails,images, setImages, previews, setPreviews, productform, descricourt, descrilong, setDescricourt, setDescrilong }) => {

  const dispatch = useDispatch();
  
  /* *****************************************************************************************
    // **************** Rayons - Catégories - Sous-catégories - Marques ************************
    ***************************************************************************************** */
   
  /* ----------------------------------------------------------
                              Rayons  
    ----------------------------------------------------------- */
    //----------------------- Submit Rayon
    const rayonform = useRef();

    const submitrayon = (e) => {
      e.preventDefault();
      const data = {
        rayon: rayonform.current[0].value,
      };
      dispatch(addRayon(data));
      rayonform.current[0].value = "";
    };
    
    //------------------------ Sélectionner un rayon
    const rayon = useSelector((state) => state.rayonReducer.rayon);
    const selectedRayon = productdetails && rayon ? rayon.find((myrayon) => {
      return Number(myrayon.id) === Number(productdetails.rayon);
    }) : null;
  
    //------------------------ Import Rayon
    const [rayonselect, setRayonselect] = useState(productdetails && selectedRayon? selectedRayon.rayon : null);
    const [rayonlist, setRayonlist] = useState([]);

    useEffect(() => {
      const listofrayon =
        !isEmpty(rayon) &&
        rayon.map((rayon) => (
          <option key={rayon.id} value={rayon.id}>
            {rayon.rayon}
          </option>
        ));
      setRayonlist(listofrayon);
    }, [rayon]);
 
    const rayonchoice = (e) => {
      setRayonselect(e.target.value);
    };

  /* ----------------------------------------------------------
                              Catégorie  
    ----------------------------------------------------------- */
    //----------------------- Catégorie
    const categorie = useSelector((state) => state.categorieReducer.categorie);

    const [categorielist, setCategorielist] = useState([]);
    useEffect(() => {
      let listofcategorie = [];
      listofcategorie =
        !isEmpty(categorie) &&
        categorie.map(
          (categorie) =>
            categorie.idrayon == rayonselect && (
              <option key={categorie.id} value={categorie.id}>
                {categorie.categorie}
              </option>
            )
        );
      setCategorielist(listofcategorie);
    }, [categorie, rayonselect]);
  
    //------------------------- Submit Catégorie
    const categorieform = useRef();

    const submitcategorie = (e) => {
      e.preventDefault();
      const data = {
        categorie: categorieform.current[1].value,
        idrayon: rayonselect,
      };
      categorieform.current[1].value = "";
      console.log(data);
      dispatch(addCategorie(data));
  };
  
  //------------------------ Sélectionner une catégorie
  const selectedCategorie = productdetails && categorie ? categorie.find((mycategory) => {
    return Number(mycategory.id) === Number(productdetails.categorie);
  }) : null;

  
  /* ----------------------------------------------------------
                              Sous-Catégorie  
    ----------------------------------------------------------- */
  //------------------------ Sélectionner une sous-catégorie
    const souscatform = useRef();
    const souscategorie = useSelector((state) => state.souscatReducer.souscat);
    const [souscatlist, setSouscatlist] = useState([]);
  const selectedSouscategorie = productdetails ? souscategorie.find((mysouscateg) => {
    return Number(mysouscateg.id) === Number(productdetails.souscategorie)
  }) : null;

    //----------------------- Sous Categorie
    const [categorieselect, setCategorieselect] = useState(productdetails && selectedCategorie ? selectedCategorie.categorie : null);
    const [souscategorieselect, setSouscategorieselect] = useState(productdetails && selectedSouscategorie ? selectedSouscategorie.souscategorie : null);

    const categoriechoice = (e) => {
      setCategorieselect(e.target.value);
    };

    const souscatchoice = (e) => {
      setSouscategorieselect(e.target.value);
    };


    useEffect(() => {
      const templist =
        !isEmpty(souscategorie) &&
        souscategorie.map(
          (souscat) =>
            souscat.idcategorie == categorieselect && (
              <option key={souscat.id} value={souscat.id}>
                {souscat.souscategorie}
              </option>
            )
        );
      setSouscatlist(templist);
    }, [souscategorie, categorieselect, categorie, rayonselect, rayonlist]);

    //------------------------------Submit
    const submitsouscat = (e) => {
      e.preventDefault();
      const data = {
        idcategorie: categorieselect,
        souscategorie: souscatform.current[1].value,
      };
      dispatch(addsouscat(data));
      souscatform.current[1].value = "";
    };
  

  /* ----------------------------------------------------------
                              Marque  
    ----------------------------------------------------------- */
  //------------------------ Sélectionner une marque
  const marques = useSelector((state) => state.marqueReducer.marque);
  const selectedMarque = productdetails && marques ? marques.find((mymark) => {
    return Number(mymark.id) === Number(productdetails.marque)
  }) : null;

    //----------------------- Submit Marque
    const [marqueselect, setMarqueselect] = useState(productdetails && selectedMarque ? selectedMarque.marque : null);
    const marquechoice = (e) => {
      setMarqueselect(e.target.value);
    };
    const brandrayonform = useRef();
    const submitbrand = (e) => {
      e.preventDefault();
      const data = {
        marque: brandrayonform.current[1].value,
        idrayon: brandrayonform.current[0].value,
      };
      dispatch(addMarque(data));

      brandrayonform.current[1].value = "";
    };


    const [listofmark, setListofmark] = useState([]);

    useEffect(() => {
      const listetemporaire =
        !isEmpty(marques) &&
        marques
          .filter((marque) => marque.idrayon == rayonselect)
          .map((marque) => (
            <option key={marque.id} value={marque.id}>
              {marque.marque}
            </option>
          ));
      setListofmark(listetemporaire);
    }, [marques, rayonselect]);

  /* ------------------------------- VIDER -------------------------------------- */
    // Vider liste de catégories, sous-catégories et marques
    useEffect(() => {
      setCategorielist([]);
      setSouscatlist([]);
      setListofmark([]);
      setRayonselect(0)
      setCategorieselect(0)
      setSouscategorieselect(0);
      setMarqueselect(0);
    }, [productdetails]);


  //------------------------------State des "Editor"-----------------------------------
  useEffect(() => {
    if (productdetails && productdetails.courtdescript) {
      if (!descricourt.getCurrentContent().hasText()) {
        try {
          const contentState = convertFromRaw(JSON.parse(productdetails.courtdescript));
          setDescricourt(EditorState.createWithContent(contentState));
        } catch (error) {
          console.error("Erreur lors de la conversion de courtdescript: ", error);
        }
      }
    }
  }, [descricourt]);

  useEffect(() => {
    if (productdetails && productdetails.longdescript) {
      if (!descrilong.getCurrentContent().hasText()) {
        try {
          const contentState = convertFromRaw(JSON.parse(productdetails.longdescript));
          setDescrilong(EditorState.createWithContent(contentState));
        } catch (error) {
          console.error("Erreur lors de la conversion de courtdescript: ", error);
        }
      }
    }
  }, [descrilong]);
 

  //------------------------------"OnChange" Function des "Editor"----------------------
  const handleEditorChange = (newEditorState) => {
    setDescricourt(newEditorState);
  };
  const handlelongdescchange = (newEditorState) => {
    setDescrilong(newEditorState);
  };

  
  //------------------------------Gestion des Images-----------------------------------
  let imagedefault = "./image/imageicon.png";
  const [changeimage, setChangeimage] = useState(Number(1));
  
  const renderimages = [
    { preview: previews[0], productImage: productdetails?.image01 },
    { preview: previews[1], productImage: productdetails?.image02 },
    { preview: previews[2], productImage: productdetails?.image03 },
    { preview: previews[3], productImage: productdetails?.image04 },
    { preview: previews[4], productImage: productdetails?.image05 },
    { preview: previews[5], productImage: productdetails?.image06 },
  ];
  

  const handleImageChange = (e, i) => {
    e.preventDefault();

    const files = e.target.files;
    if (files.length > 0) {

      const newImages = images;
      const newPreviews = previews;

      newImages[i] = files[0];
      newPreviews[i] = URL.createObjectURL(files[0]);

      setImages(newImages);
      setPreviews(newPreviews);
      
      // Afficher le Preview de l'image
      (changeimage > 1) ? setChangeimage(changeimage - 1) : setChangeimage(changeimage + 1);
      
      
    }
  };
  
  /* ------------------------------------------------------------------------------------
     -----------------------------------ADD PRODUCT--------------------------------------
     ------------------------------------------------------------------------------------- */
  
  //----------------------------------- Description courte
  const mycontent = descricourt.getCurrentContent();
  const myrawcontent = convertToRaw(mycontent);

  //----------------------------------- Description longue
  const longdesc = descrilong.getCurrentContent();
  const mydescrawcontent = convertToRaw(longdesc);
  

  const addproduct = (e) => {
    e.preventDefault();

    //------------------------------------- Datas
    const data = {
      userid: userdata.id,
      storeid: storedata.id,
      nomproduit: productform.current[0].value,
      rayon: rayonselect,
      categorie: categorieselect,
      souscategorie: souscategorieselect,
      reference: productform.current[5].value,
      marque: marqueselect,
      prix: productform.current[12].value,
      image01 : images[0],
      image02 : images[1],
      image03 : images[2],
      image04 : images[3],
      image05 : images[4],
      image06 : images[5],
      courtdescript: JSON.stringify(myrawcontent),
      longdescript: JSON.stringify(mydescrawcontent),
    };
  
    dispatch(addProduct(data));
    dispatch(getProduct());
    for (let i = 0; i < 13; i++) {
      productform.current[i].value = "";
    }
    productform.current.reset();
    setDescricourt(EditorState.createEmpty());
    setDescrilong(EditorState.createEmpty());
    setPreviews([null, null, null, null, null, null]);
    closeproductmodal();
  };

  
  /* ------------------------------------------------------------------------------------
     --------------------------------MODIFY PRODUCT--------------------------------------
     ------------------------------------------------------------------------------------- */
  const modifyproduct = (e) => {
    e.preventDefault();
    //------------------------------------- Datas

    const data = {
      id: productdetails.id,
      userid: userdata.id,
      storeid: storedata.id,
      nomproduit: productform.current[0].value,
      rayon: rayonselect,
      categorie: categorieselect,
      souscategorie: souscategorieselect,
      reference: productform.current[5].value,
      marque: marqueselect,
      prix: productform.current[12].value,
      image01 : images[0],
      image02 : images[1],
      image03 : images[2],
      image04 : images[3],
      image05 : images[4],
      image06 : images[5],
      courtdescript: JSON.stringify(myrawcontent),
      longdescript: JSON.stringify(mydescrawcontent),
    };
    
    dispatch(modifyProduct(data));
    // dispatch(getProduct());
    for (let i = 0; i < 13; i++) {
      productform.current[i].value = "";
    }
    productform.current.reset();
    setDescricourt(EditorState.createEmpty());
    setDescrilong(EditorState.createEmpty());
    setPreviews([null, null, null, null, null, null]);
    closeproductmodal();
  };

  
  
  // **************************************************************************************************************
  // -----------------------------------------------------JSX------------------------------------------------------
  // **************************************************************************************************************
    return (
      <div className="modal-content">
        <div className="modal-header">
          <h2>Ajouter un produit</h2>
        </div>
        <div className="modal-body">
          <div className="formcontainer">
            <form
              ref={productform}
              encType="multipart/form-data"
            >
            {/* --------------------------------------------------------------------------------------
                                    Nom produit
              -------------------------------------------------------------------------------------*/}
              <div className="separatecol"><h3>Nom du produit</h3></div>
              <div className="separatecol">
                <div className="col01">
                  {/* <label htmlFor="nomproduit">Nom produit</label> */}
                  <input type="text" defaultValue={productdetails ? productdetails.nomproduit : ''} name="nomproduit" />
                </div>
              </div>

              {/* --------------------------------------------------------------------------------------
                                      Catégories
                -------------------------------------------------------------------------------------*/}
              <div className="separatecol">
                <div className="modalleftcol">
                  <h3>Place dans le magasin</h3>
                  {/* Déclaration de la variable rayonname en dehors du JSX */}
                  
                  <label htmlFor="rayon">Rayon</label>
                  <select onChange={(e) => rayonchoice(e)}>
                    <option key="0" value={selectedRayon ? selectedRayon.id : 0}>
                      {
                        selectedRayon ? selectedRayon.rayon : 'Sélectionner un rayon'
                      }
                    </option>
                    {rayonlist}
                  </select>

                  <label htmlFor="categorie">Catégorie</label>
                  <select onChange={(e) => categoriechoice(e)}>
                    <option key="0" value={selectedCategorie ? selectedCategorie.id : 0}>
                      {
                        selectedCategorie ? selectedCategorie.categorie : 'Sélectionner une catégorie '
                      }
                    </option>
                    {categorielist}
                  </select>

                  <label htmlFor="souscategorie">Sous-catégorie</label>
                  <select onChange={(e) => souscatchoice(e)}>
                    <option key="0" value={selectedSouscategorie ? selectedSouscategorie.id: 0}>
                      {
                        selectedSouscategorie ? selectedSouscategorie.souscategorie : 'Sélectionner une sous-catégorie '
                      }
                    </option>
                    {souscatlist}
                  </select>

                  <h3>Références</h3>
                  <label htmlFor="rayon">Marque</label>
                  <select onChange={(e) => marquechoice(e)}>
                    <option key="0" value={selectedMarque ? selectedMarque.id : ''}>
                      {
                        selectedMarque ? selectedMarque.marque : 'Sélectionner une marque '
                      }
                    </option>
                    {listofmark}
                  </select>

                  <label htmlFor="nomproduit">Référence</label>
                  <input type="text" name="nomproduit"  defaultValue={productdetails ? productdetails.reference : ''} />
                </div>

                {/* --------------------------------------------------------------------------------------
                                      Images
                  -------------------------------------------------------------------------------------*/}
                <div className="bricks">
                  <h3 style={{ textAlign: "center" }}>Images</h3>
                  <div className="brickctnr">
                    {renderimages.map((img, index) => (
                      <div className="blockbrick" key={index}>
                        {
                          productdetails ? (
                            (changeimage && img.preview) ? (
                              <img src={img.preview} alt="mon image" />
                            ) : (
                              img.productImage ? (
                                <img src={'http://localhost:8080/uploads/' + img.productImage} alt="image non chargée" />
                              ) : (
                                <img src={imagedefault} alt="pas d'image sur le produit" />
                              )
                            )
                          ) : (
                            (changeimage && img.preview) ? (
                              <img src={img.preview} alt="mon image" />
                            ) : (
                              <img src={imagedefault} alt="pas encore d'image" />
                            )
                          )
                        }
                        {/* <label>{img.preview && images[index].name}</label> */}
                        <input className="imginput" type="file" onChange={(e) => handleImageChange(e, index)} />
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              {/* --------------------------------------------------------------------------------------
                                       Prix et Promo
                -------------------------------------------------------------------------------------*/}
              {/* <h3>Couleurs dispo</h3>
                <h3>Taille dispo</h3>
                <h3>Dimensions empaquettage</h3>
                  <h3>Poids net</h3> */}
              {/* <div className="separatecol">
                <div className="col02">
                  
                </div>

                <div className="col01">
                  
                </div>
                <div className="col02">
                  
                </div>
              </div> */}
              <div className="separatecol"><h3>Prix</h3></div>
              <div className="separatecol">
                <div style={{display: "inline-block"}}>
                  {/* <label htmlFor="prix">Prix (en Ar)</label> */}
                  <input defaultValue={productdetails ? productdetails.prix : 0} style={{display: "inline-block", textAlign:"right"}} type="number" name="prix" id="prix" />
                  <span>Ariary</span>
                </div>
              </div>

              {/* <h3>Promo</h3>
                <div className="separatecol">
                  <div className="col02">
                    <label htmlFor="prix">Date début promo</label>
                    <input type="date" name="prix" id="prix" />
                  </div>
                  <div className="col02">
                    <label htmlFor="prix">Date fin promo</label>
                    <input type="date" name="prixpromo" id="prixpromo" />
                  </div>
                  <div className="col02">
                    <label htmlFor="prix">Prix promo (en Ar)</label>
                    <input type="number" name="prixpromo" id="prixpromo" />
                  </div>
                </div> */
              }
              
              {/* --------------------------------------------------------------------------------------
                                      Descriptions
                -------------------------------------------------------------------------------------*/}
              <div className="separatecol"><h3>Description courte</h3></div>
              <div className="separatecol">
                <div
                  className="col01"
                  style={{
                    backgroundColor: "#fff",
                    color: "#000",
                    minWidth: "300px",
                    maxWidth: "800px",
                    padding: "30px",
                  }}
                >
                  <Editor editorState={descricourt} onEditorStateChange={handleEditorChange}></Editor>
                </div>
              </div>

              <div className="separatecol"><h3>Description longue</h3></div>
              <div className="separatecol">
                <div
                  className="col01"
                  style={{
                    backgroundColor: "#fff",
                    color: "#000",
                    minWidth: "300px",
                    maxWidth: "800px",
                    padding: "30px",
                  }}
                >
                  <Editor editorState={descrilong} onEditorStateChange={handlelongdescchange}></Editor>
                </div>
              </div>

              { isEmpty(productdetails) ? <button onClick={(e) => addproduct(e)}>Enregistrer </button> : <button onClick={(e) => modifyproduct(e)}>Modifier </button> }
            </form>
          </div>
        </div>
        <div className="modal-footer">
          <button onClick={closeproductmodal}>Fermer</button>
        </div>


        

      {/* *****************************************************************
                              Ajouter rayons/catégories
          ***************************************************************** */}
      <div className="">
        {/* *****************************************************************
                                Formulaire Ajouter un rayon 
            ***************************************************************** */}
        <div className="addproductclass">
          {/* <div className="productclass">
            <h3>Ajouter un rayon</h3>
            <form ref={rayonform} onSubmit={(e) => submitrayon(e)}>
              <input type="text" />
            </form>
          </div> */}

          {/* *****************************************************************
                                Formulaire Ajouter une catégorie 
            ***************************************************************** */}
          {/* <div className="productclass">
            <h3>Ajouter une catégorie</h3>
            <form ref={categorieform} onSubmit={(e) => submitcategorie(e)}>
              <select onChange={(e) => rayonchoice(e)}>
                <option key="0" value="0">
                  Sélectionner un rayon
                </option>
                {rayonlist}
              </select>
              <input type="text" />
            </form>
          </div> */}

          {/* *****************************************************************
                                Formulaire Ajouter une sous-catégorie 
            ***************************************************************** */}
          {/* <div className="productclass">
            <h3>Ajouter une sous-catégorie</h3>
            <form ref={souscatform} onSubmit={(e) => submitsouscat(e)}>
              <select onChange={(e) => categoriechoice(e)}>
                <option key="0" value="0">
                  Sélectionner une catégorie
                </option>
                {categorielist}
              </select>
              <input type="text" name="souscategorie" id="souscategorie" />
            </form>
          </div> */}
        </div>

        {/* *****************************************************************
                              Formulaire Ajouter une marque 
          ***************************************************************** */}
        {/* <div className="addproductclass">
          <div className="productclass">
            <h3>Ajouter une marque</h3>
            <form ref={brandrayonform} onSubmit={(e) => submitbrand(e)}>
              <select>
                <option key="0" value="souscategorie">
                  Sélectionner un rayon
                </option>
                {rayonlist}
              </select>
              <input type="text" name="marque" id="marque" />
            </form>
          </div>
        </div> */}
      </div>



      </div>
    );
};

export default Productformulaire;